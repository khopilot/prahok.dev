generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  bio         String?
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  role        UserRole  @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  comments    Comment[]
  ratings     Rating[]
  recipes     Recipe[]
  sessions    Session[]
  projects    Project[]

  @@index([email])
  @@index([username])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Recipe {
  id           String        @id @default(cuid())
  title        String
  slug         String        @unique
  description  String
  ingredients  Json
  instructions Json
  prepTime     Int
  cookTime     Int
  servings     Int
  difficulty   Difficulty
  authorId     String
  categoryId   String?
  isPublished  Boolean       @default(false)
  isFeatured   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]
  ratings      Rating[]
  author       User          @relation(fields: [authorId], references: [id])
  category     Category?     @relation(fields: [categoryId], references: [id])
  images       RecipeImage[]
  tags         Tag[]         @relation("RecipeToTag")

  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  recipes     Recipe[]

  @@index([slug])
}

model RecipeImage {
  id        String  @id @default(cuid())
  recipeId  String
  url       String
  caption   String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model Rating {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  rating    Int
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([recipeId, userId])
  @@index([recipeId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([recipeId])
  @@index([userId])
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  slug    String   @unique
  recipes Recipe[] @relation("RecipeToTag")

  @@index([slug])
}

enum UserRole {
  USER
  CHEF
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Project {
  id              String       @id @default(cuid())
  name            String
  description     String
  prompt          String       @db.Text
  generatedFiles  Json         @default("[]")
  sandboxId       String?
  previewUrl      String?
  status          ProjectStatus @default(ACTIVE)
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  lastAccessedAt  DateTime     @default(now())
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DELETED
}
